https://trainingportal.linuxfoundation.org/learn/dashboard
userid- ranjanchourasia@gmail.com
password- Jaisaibaba@2024

Ques 1
kubectl api-resources

deployments                       deploy       apps/v1                                true         Deployment
statefulsets                      sts          apps/v1                                true         StatefulSet
daemonsets                        ds           apps/v1                                true         DaemonSet

create the file q1.rbac.yaml
make four changes changes- 
 name: deployment-clusterone
- apiGroups: ["","apps/v1"]
resources: ["deployments","statefulsets","daemonsets"]
  verbs: ["create"]

kubectl apply -f q1-rbac.yaml
kubectl describe clusterrole.rbac.authorization.k8s.io/deployment-clusterone

  kubectl create ns app-team1
  kubectl create serviceaccount cicd-token -n app-team1
  kubectl get serviceaccount -n app-team1

create a new file- q1-bind.yaml
make these changes- 
  namespace: app-team1
  kind: ServiceAccount
  name: cicd-token # "name" is case sensitive
  namespace: app-team1
  kind: ClusterRole #this must be Role or ClusterRole
  name: deployment-clusterone # this must match the name of the Role or ClusterRole you wish to bind to

kubectl -n app-team1 describe rolebinding.rbac.authorization.k8s.io/read-pods

***************************************************************************************************************************************************

Ques 2
set context abv 
kubectl cordon ip-10-0-0-133


***************************************************************************************************************************************************
Ques 3
Take the backup-
ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key snapshot save /tmp/myclusterbackup.db
Restore it
 ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key snapshot restore /tmp/myclusterbackup.db
replace the old file with new file 
go to the path /root/exam/default.etcd/member
cp -rvf * /var/lib/etcd/member/

***************************************************************************************************************************************************
Ques 4
create a name space corp-net
cubectl get ns
run two pods on the same name space
label the pods
kubectl -n corp-net label pods firstpod area=prod
kubectl -n corp-net label pods secondpod area=prod
search network policy 
create teh netpol.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-port-from-namespace
  namespace: corp-net
spec:
  podSelector: {}
#    matchLabels:
#      role: db
  policyTypes:
  - Ingress
# - Egress
  ingress:
  - from:
#    - ipBlock:
#        cidr: 172.17.0.0/16
#        except:
#        - 172.17.1.0/24
    - namespaceSelector:
        matchLabels:
          area: test
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8080

***************************************************************************************************************************************************
Ques 5
create one deployment if exist then edit it 
edit the deployment 
 ports:
        - containerPort: 80
          name: http
          protocol: TCP
save and exit

kubectl expose deployment front-end --name "front-end-svc
kubectl expose deployment front-end --name front-end-svc-np --type NodePort
***************************************************************************************************************************************************
Ques 6
copy the ingress yaml and change as below- 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ping
  namespace: ing-internal
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx-example
  rules:
  - http:
      paths:
      - path: /hello
        pathType: Prefix
        backend:
          service:
            name: hello
            port:
              number: 5678

***************************************************************************************************************************************************


